AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Agents ECS Infrastructure - Simplified deployment with Docker Compose support'

Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues: [staging, production]
    Description: Deployment environment

  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key for AI agents

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC

Resources:
  # VPC and Networking (simplified version)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-vpc-${Environment}'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-igw-${Environment}'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets (for Load Balancer)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-public-subnet-1-${Environment}'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-public-subnet-2-${Environment}'

  # Private Subnets (for ECS tasks)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-private-subnet-1-${Environment}'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.12.0/24
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-private-subnet-2-${Environment}'

  # NAT Gateway for private subnets
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-public-routes-${Environment}'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'ai-agents-private-routes-${Environment}'

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # S3 Bucket for Task Artifacts
  TaskArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'ai-agents-artifacts-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: ai-agents

  # SQS Queues (simplified)
  TaskRouterJobsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'task-router-jobs-${Environment}'
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600

  TaskEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'task-events-${Environment}'
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600

  ResearchTasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'research-tasks-${Environment}'
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600

  ProductManagerTasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'product-manager-tasks-${Environment}'
      VisibilityTimeout: 600
      MessageRetentionPeriod: 1209600

  DrawerTasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'drawer-tasks-${Environment}'
      VisibilityTimeout: 600
      MessageRetentionPeriod: 1209600

  DesignerTasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'designer-tasks-${Environment}'
      VisibilityTimeout: 600
      MessageRetentionPeriod: 1209600

  CoderTasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'coder-tasks-${Environment}'
      VisibilityTimeout: 1800
      MessageRetentionPeriod: 1209600

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'ai-agents-cluster-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OpenAIApiKeySecret
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: ai-agents

  # ECS Task Role (for application permissions)
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AgentTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt TaskRouterJobsQueue.Arn
                  - !GetAtt TaskEventsQueue.Arn
                  - !GetAtt ResearchTasksQueue.Arn
                  - !GetAtt ProductManagerTasksQueue.Arn
                  - !GetAtt DrawerTasksQueue.Arn
                  - !GetAtt DesignerTasksQueue.Arn
                  - !GetAtt CoderTasksQueue.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt TaskArtifactsBucket.Arn
                  - !Sub '${TaskArtifactsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OpenAIApiKeySecret
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: ai-agents

  # Security Group for ECS Tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'ai-agents-alb-${Environment}'
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # ALB Listener with routing rules
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Listener Rule for task-router API routes
  TaskRouterAPIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/api/router/*'
            - '/health'
            - '/metrics'
      ListenerArn: !Ref ALBListener
      Priority: 100

  # ALB Listener Rule for agent-web API routes  
  AgentWebAPIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/api/jobs*'
            - '/api/tasks*'
            - '/api/health*'
      ListenerArn: !Ref ALBListener
      Priority: 200

  # Secrets Manager for OpenAI API Key
  OpenAIApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'ai-agents-openai-api-key-${Environment}'
      Description: 'OpenAI API Key for AI Agents'
      SecretString: !Sub |
        {
          "openai_api_key": "${OpenAIApiKey}"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: ai-agents

  # CloudWatch Log Groups
  TaskRouterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-agents-task-router
      RetentionInDays: 14

  ResearcherLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-agents-researcher
      RetentionInDays: 14

  ProductManagerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-agents-product_manager
      RetentionInDays: 14

  DrawerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-agents-drawer
      RetentionInDays: 14

  DesignerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-agents-designer
      RetentionInDays: 14

  CoderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-agents-coder
      RetentionInDays: 14

  AgentWebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-agents-agent-web
      RetentionInDays: 14

  # Target Groups
  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "ai-agents-api-${Environment}"
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "ai-agents-web-${Environment}"
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  PrivateSubnets:
    Description: Private subnet IDs
    Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'

  PublicSubnets:
    Description: Public subnet IDs
    Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'

  ECSTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskExecutionRole'

  ECSTaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskRole'

  ECSSecurityGroupId:
    Description: ECS Security Group ID
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ECSSecurityGroup'

  LoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  APITargetGroupArn:
    Description: API Target Group ARN
    Value: !Ref APITargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-APITargetGroup'

  WebTargetGroupArn:
    Description: Web Target Group ARN
    Value: !Ref WebTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-WebTargetGroup'

  TaskArtifactsBucketName:
    Description: S3 Bucket Name for Task Artifacts
    Value: !Ref TaskArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-TaskArtifactsBucket' 